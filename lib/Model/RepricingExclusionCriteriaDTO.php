<?php
/**
 * RepricingExclusionCriteriaDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingExclusionCriteriaDTO Class Doc Comment
 *
 * @category    Class
 * @description An exclusion criteria. An exclusion criteria is a set of exclusion criterion. Each exclusion criterion defines if an offer must be excluded form repricing. onlyFeaturedMerchant for example excludes offers by sellers which are not a featured merchant. The name must be unique.
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingExclusionCriteriaDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingExclusionCriteriaDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'criterion_rating' => '\eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionRatingDTO',
        'criterion_seller_id' => '\eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionSellerIdDTO',
        'criterion_shipping_time' => '\eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShippingTimeDTO',
        'criterion_ships_from' => '\eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShipsFromDTO',
        'is_default_fba' => 'bool',
        'is_default_mfn' => 'bool',
        'name' => 'string',
        'only_featured_merchant' => 'bool',
        'own_seller_id' => 'string',
        'seller_fulfillment_type' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'criterion_rating' => 'criterionRating',
        'criterion_seller_id' => 'criterionSellerId',
        'criterion_shipping_time' => 'criterionShippingTime',
        'criterion_ships_from' => 'criterionShipsFrom',
        'is_default_fba' => 'isDefaultFBA',
        'is_default_mfn' => 'isDefaultMFN',
        'name' => 'name',
        'only_featured_merchant' => 'onlyFeaturedMerchant',
        'own_seller_id' => 'ownSellerId',
        'seller_fulfillment_type' => 'sellerFulfillmentType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'criterion_rating' => 'setCriterionRating',
        'criterion_seller_id' => 'setCriterionSellerId',
        'criterion_shipping_time' => 'setCriterionShippingTime',
        'criterion_ships_from' => 'setCriterionShipsFrom',
        'is_default_fba' => 'setIsDefaultFba',
        'is_default_mfn' => 'setIsDefaultMfn',
        'name' => 'setName',
        'only_featured_merchant' => 'setOnlyFeaturedMerchant',
        'own_seller_id' => 'setOwnSellerId',
        'seller_fulfillment_type' => 'setSellerFulfillmentType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'criterion_rating' => 'getCriterionRating',
        'criterion_seller_id' => 'getCriterionSellerId',
        'criterion_shipping_time' => 'getCriterionShippingTime',
        'criterion_ships_from' => 'getCriterionShipsFrom',
        'is_default_fba' => 'getIsDefaultFba',
        'is_default_mfn' => 'getIsDefaultMfn',
        'name' => 'getName',
        'only_featured_merchant' => 'getOnlyFeaturedMerchant',
        'own_seller_id' => 'getOwnSellerId',
        'seller_fulfillment_type' => 'getSellerFulfillmentType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SELLER_FULFILLMENT_TYPE_FBA = 'FBA';
    const SELLER_FULFILLMENT_TYPE_MFN = 'MFN';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSellerFulfillmentTypeAllowableValues()
    {
        return [
            self::SELLER_FULFILLMENT_TYPE_FBA,
            self::SELLER_FULFILLMENT_TYPE_MFN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['criterion_rating'] = isset($data['criterion_rating']) ? $data['criterion_rating'] : null;
        $this->container['criterion_seller_id'] = isset($data['criterion_seller_id']) ? $data['criterion_seller_id'] : null;
        $this->container['criterion_shipping_time'] = isset($data['criterion_shipping_time']) ? $data['criterion_shipping_time'] : null;
        $this->container['criterion_ships_from'] = isset($data['criterion_ships_from']) ? $data['criterion_ships_from'] : null;
        $this->container['is_default_fba'] = isset($data['is_default_fba']) ? $data['is_default_fba'] : null;
        $this->container['is_default_mfn'] = isset($data['is_default_mfn']) ? $data['is_default_mfn'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['only_featured_merchant'] = isset($data['only_featured_merchant']) ? $data['only_featured_merchant'] : null;
        $this->container['own_seller_id'] = isset($data['own_seller_id']) ? $data['own_seller_id'] : null;
        $this->container['seller_fulfillment_type'] = isset($data['seller_fulfillment_type']) ? $data['seller_fulfillment_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["FBA", "MFN"];
        if (!in_array($this->container['seller_fulfillment_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'seller_fulfillment_type', must be one of 'FBA', 'MFN'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["FBA", "MFN"];
        if (!in_array($this->container['seller_fulfillment_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets criterion_rating
     * @return \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionRatingDTO
     */
    public function getCriterionRating()
    {
        return $this->container['criterion_rating'];
    }

    /**
     * Sets criterion_rating
     * @param \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionRatingDTO $criterion_rating
     * @return $this
     */
    public function setCriterionRating($criterion_rating)
    {
        $this->container['criterion_rating'] = $criterion_rating;

        return $this;
    }

    /**
     * Gets criterion_seller_id
     * @return \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionSellerIdDTO
     */
    public function getCriterionSellerId()
    {
        return $this->container['criterion_seller_id'];
    }

    /**
     * Sets criterion_seller_id
     * @param \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionSellerIdDTO $criterion_seller_id
     * @return $this
     */
    public function setCriterionSellerId($criterion_seller_id)
    {
        $this->container['criterion_seller_id'] = $criterion_seller_id;

        return $this;
    }

    /**
     * Gets criterion_shipping_time
     * @return \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShippingTimeDTO
     */
    public function getCriterionShippingTime()
    {
        return $this->container['criterion_shipping_time'];
    }

    /**
     * Sets criterion_shipping_time
     * @param \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShippingTimeDTO $criterion_shipping_time
     * @return $this
     */
    public function setCriterionShippingTime($criterion_shipping_time)
    {
        $this->container['criterion_shipping_time'] = $criterion_shipping_time;

        return $this;
    }

    /**
     * Gets criterion_ships_from
     * @return \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShipsFromDTO
     */
    public function getCriterionShipsFrom()
    {
        return $this->container['criterion_ships_from'];
    }

    /**
     * Sets criterion_ships_from
     * @param \eSagu\Amzn\RePricing\V1\Model\ExclusionCriterionShipsFromDTO $criterion_ships_from
     * @return $this
     */
    public function setCriterionShipsFrom($criterion_ships_from)
    {
        $this->container['criterion_ships_from'] = $criterion_ships_from;

        return $this;
    }

    /**
     * Gets is_default_fba
     * @return bool
     */
    public function getIsDefaultFba()
    {
        return $this->container['is_default_fba'];
    }

    /**
     * Sets is_default_fba
     * @param bool $is_default_fba
     * @return $this
     */
    public function setIsDefaultFba($is_default_fba)
    {
        $this->container['is_default_fba'] = $is_default_fba;

        return $this;
    }

    /**
     * Gets is_default_mfn
     * @return bool
     */
    public function getIsDefaultMfn()
    {
        return $this->container['is_default_mfn'];
    }

    /**
     * Sets is_default_mfn
     * @param bool $is_default_mfn
     * @return $this
     */
    public function setIsDefaultMfn($is_default_mfn)
    {
        $this->container['is_default_mfn'] = $is_default_mfn;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets only_featured_merchant
     * @return bool
     */
    public function getOnlyFeaturedMerchant()
    {
        return $this->container['only_featured_merchant'];
    }

    /**
     * Sets only_featured_merchant
     * @param bool $only_featured_merchant
     * @return $this
     */
    public function setOnlyFeaturedMerchant($only_featured_merchant)
    {
        $this->container['only_featured_merchant'] = $only_featured_merchant;

        return $this;
    }

    /**
     * Gets own_seller_id
     * @return string
     */
    public function getOwnSellerId()
    {
        return $this->container['own_seller_id'];
    }

    /**
     * Sets own_seller_id
     * @param string $own_seller_id
     * @return $this
     */
    public function setOwnSellerId($own_seller_id)
    {
        $this->container['own_seller_id'] = $own_seller_id;

        return $this;
    }

    /**
     * Gets seller_fulfillment_type
     * @return string
     */
    public function getSellerFulfillmentType()
    {
        return $this->container['seller_fulfillment_type'];
    }

    /**
     * Sets seller_fulfillment_type
     * @param string $seller_fulfillment_type
     * @return $this
     */
    public function setSellerFulfillmentType($seller_fulfillment_type)
    {
        $allowed_values = array('FBA', 'MFN');
        if (!is_null($seller_fulfillment_type) && (!in_array($seller_fulfillment_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'seller_fulfillment_type', must be one of 'FBA', 'MFN'");
        }
        $this->container['seller_fulfillment_type'] = $seller_fulfillment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


