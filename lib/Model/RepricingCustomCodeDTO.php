<?php
/**
 * RepricingCustomCodeDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingCustomCodeDTO Class Doc Comment
 *
 * @category    Class
 * @description A custom code. A custom code is a small JavaScript snipped used for individual price calculation. If verified is true the code can be used for optimization. The name must be unique.
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingCustomCodeDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingCustomCodeDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'inserted' => '\DateTime',
        'name' => 'string',
        'trigger_price_change' => 'bool',
        'updated' => '\DateTime',
        'use_exclusion_criteria' => 'bool',
        'use_price_gaps' => 'bool',
        'use_shipping_costs' => 'bool',
        'verified' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'inserted' => 'inserted',
        'name' => 'name',
        'trigger_price_change' => 'triggerPriceChange',
        'updated' => 'updated',
        'use_exclusion_criteria' => 'useExclusionCriteria',
        'use_price_gaps' => 'usePriceGaps',
        'use_shipping_costs' => 'useShippingCosts',
        'verified' => 'verified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'inserted' => 'setInserted',
        'name' => 'setName',
        'trigger_price_change' => 'setTriggerPriceChange',
        'updated' => 'setUpdated',
        'use_exclusion_criteria' => 'setUseExclusionCriteria',
        'use_price_gaps' => 'setUsePriceGaps',
        'use_shipping_costs' => 'setUseShippingCosts',
        'verified' => 'setVerified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'inserted' => 'getInserted',
        'name' => 'getName',
        'trigger_price_change' => 'getTriggerPriceChange',
        'updated' => 'getUpdated',
        'use_exclusion_criteria' => 'getUseExclusionCriteria',
        'use_price_gaps' => 'getUsePriceGaps',
        'use_shipping_costs' => 'getUseShippingCosts',
        'verified' => 'getVerified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['trigger_price_change'] = isset($data['trigger_price_change']) ? $data['trigger_price_change'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['use_exclusion_criteria'] = isset($data['use_exclusion_criteria']) ? $data['use_exclusion_criteria'] : null;
        $this->container['use_price_gaps'] = isset($data['use_price_gaps']) ? $data['use_price_gaps'] : null;
        $this->container['use_shipping_costs'] = isset($data['use_shipping_costs']) ? $data['use_shipping_costs'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets trigger_price_change
     * @return bool
     */
    public function getTriggerPriceChange()
    {
        return $this->container['trigger_price_change'];
    }

    /**
     * Sets trigger_price_change
     * @param bool $trigger_price_change
     * @return $this
     */
    public function setTriggerPriceChange($trigger_price_change)
    {
        $this->container['trigger_price_change'] = $trigger_price_change;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets use_exclusion_criteria
     * @return bool
     */
    public function getUseExclusionCriteria()
    {
        return $this->container['use_exclusion_criteria'];
    }

    /**
     * Sets use_exclusion_criteria
     * @param bool $use_exclusion_criteria
     * @return $this
     */
    public function setUseExclusionCriteria($use_exclusion_criteria)
    {
        $this->container['use_exclusion_criteria'] = $use_exclusion_criteria;

        return $this;
    }

    /**
     * Gets use_price_gaps
     * @return bool
     */
    public function getUsePriceGaps()
    {
        return $this->container['use_price_gaps'];
    }

    /**
     * Sets use_price_gaps
     * @param bool $use_price_gaps
     * @return $this
     */
    public function setUsePriceGaps($use_price_gaps)
    {
        $this->container['use_price_gaps'] = $use_price_gaps;

        return $this;
    }

    /**
     * Gets use_shipping_costs
     * @return bool
     */
    public function getUseShippingCosts()
    {
        return $this->container['use_shipping_costs'];
    }

    /**
     * Sets use_shipping_costs
     * @param bool $use_shipping_costs
     * @return $this
     */
    public function setUseShippingCosts($use_shipping_costs)
    {
        $this->container['use_shipping_costs'] = $use_shipping_costs;

        return $this;
    }

    /**
     * Gets verified
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     * @param bool $verified
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


