<?php
/**
 * RepricingPriceGapsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingPriceGapsDTO Class Doc Comment
 *
 * @category    Class
 * @description The price gaps. The price gaps defines ow the price should be aligned to a competitors price.A PriceGapDTO without sellerId and fulfillmentType is mandatory as default price gap to use. Further PriceGapDTOs with restriction on the sellerId and/or fulfillmentType are optional. The name must be unique.
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingPriceGapsDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingPriceGapsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_default_fba' => 'bool',
        'is_default_mfn' => 'bool',
        'name' => 'string',
        'price_gaps' => '\eSagu\Amzn\RePricing\V1\Model\PriceGapDTO[]',
        'shipping_included' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'is_default_fba' => 'isDefaultFBA',
        'is_default_mfn' => 'isDefaultMFN',
        'name' => 'name',
        'price_gaps' => 'priceGaps',
        'shipping_included' => 'shippingIncluded'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'is_default_fba' => 'setIsDefaultFba',
        'is_default_mfn' => 'setIsDefaultMfn',
        'name' => 'setName',
        'price_gaps' => 'setPriceGaps',
        'shipping_included' => 'setShippingIncluded'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'is_default_fba' => 'getIsDefaultFba',
        'is_default_mfn' => 'getIsDefaultMfn',
        'name' => 'getName',
        'price_gaps' => 'getPriceGaps',
        'shipping_included' => 'getShippingIncluded'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_default_fba'] = isset($data['is_default_fba']) ? $data['is_default_fba'] : null;
        $this->container['is_default_mfn'] = isset($data['is_default_mfn']) ? $data['is_default_mfn'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['price_gaps'] = isset($data['price_gaps']) ? $data['price_gaps'] : null;
        $this->container['shipping_included'] = isset($data['shipping_included']) ? $data['shipping_included'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets is_default_fba
     * @return bool
     */
    public function getIsDefaultFba()
    {
        return $this->container['is_default_fba'];
    }

    /**
     * Sets is_default_fba
     * @param bool $is_default_fba
     * @return $this
     */
    public function setIsDefaultFba($is_default_fba)
    {
        $this->container['is_default_fba'] = $is_default_fba;

        return $this;
    }

    /**
     * Gets is_default_mfn
     * @return bool
     */
    public function getIsDefaultMfn()
    {
        return $this->container['is_default_mfn'];
    }

    /**
     * Sets is_default_mfn
     * @param bool $is_default_mfn
     * @return $this
     */
    public function setIsDefaultMfn($is_default_mfn)
    {
        $this->container['is_default_mfn'] = $is_default_mfn;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price_gaps
     * @return \eSagu\Amzn\RePricing\V1\Model\PriceGapDTO[]
     */
    public function getPriceGaps()
    {
        return $this->container['price_gaps'];
    }

    /**
     * Sets price_gaps
     * @param \eSagu\Amzn\RePricing\V1\Model\PriceGapDTO[] $price_gaps
     * @return $this
     */
    public function setPriceGaps($price_gaps)
    {
        $this->container['price_gaps'] = $price_gaps;

        return $this;
    }

    /**
     * Gets shipping_included
     * @return bool
     */
    public function getShippingIncluded()
    {
        return $this->container['shipping_included'];
    }

    /**
     * Sets shipping_included
     * @param bool $shipping_included
     * @return $this
     */
    public function setShippingIncluded($shipping_included)
    {
        $this->container['shipping_included'] = $shipping_included;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


