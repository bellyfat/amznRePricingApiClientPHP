<?php
/**
 * RepricingItemDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  eSagu\Amzn\RePricing\V1
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eSagu amzn RePricing API
 *
 * eSagu API to reprice items on amazon.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace eSagu\Amzn\RePricing\V1\Model;

use \ArrayAccess;

/**
 * RepricingItemDTO Class Doc Comment
 *
 * @category    Class
 * @description A repricing item. A repricing item contains information imported from amzn, information about competing offers infos about the optimized price, the strategy settings and the price upload for example.
 * @package     eSagu\Amzn\RePricing\V1
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RepricingItemDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RepricingItemDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'inserted' => '\DateTime',
        'updated' => '\DateTime',
        'sku' => 'string',
        'asin' => 'string',
        'title' => 'string',
        'amazon_price' => 'int',
        'initial_price' => 'int',
        'quantity' => 'int',
        'listed' => 'bool',
        'condition' => 'string',
        'fba' => 'bool',
        'amazon_open_date' => 'int',
        'strategy' => '\eSagu\Amzn\RePricing\V1\Model\RepricingItemStrategyDTO',
        'offers' => '\eSagu\Amzn\RePricing\V1\Model\ItemOfferDTO[]',
        'optimization_result' => '\eSagu\Amzn\RePricing\V1\Model\RepricingItemOptimizationResultDTO',
        'feed_submission' => '\eSagu\Amzn\RePricing\V1\Model\RepricingFeedSubmissionDTO',
        'offers_updated' => 'int',
        'sales_rankings' => '\eSagu\Amzn\RePricing\V1\Model\RepricingItemSalesRankingsDTO'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'inserted' => 'inserted',
        'updated' => 'updated',
        'sku' => 'sku',
        'asin' => 'asin',
        'title' => 'title',
        'amazon_price' => 'amazonPrice',
        'initial_price' => 'initialPrice',
        'quantity' => 'quantity',
        'listed' => 'listed',
        'condition' => 'condition',
        'fba' => 'fba',
        'amazon_open_date' => 'amazonOpenDate',
        'strategy' => 'strategy',
        'offers' => 'offers',
        'optimization_result' => 'optimizationResult',
        'feed_submission' => 'feedSubmission',
        'offers_updated' => 'offersUpdated',
        'sales_rankings' => 'salesRankings'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'inserted' => 'setInserted',
        'updated' => 'setUpdated',
        'sku' => 'setSku',
        'asin' => 'setAsin',
        'title' => 'setTitle',
        'amazon_price' => 'setAmazonPrice',
        'initial_price' => 'setInitialPrice',
        'quantity' => 'setQuantity',
        'listed' => 'setListed',
        'condition' => 'setCondition',
        'fba' => 'setFba',
        'amazon_open_date' => 'setAmazonOpenDate',
        'strategy' => 'setStrategy',
        'offers' => 'setOffers',
        'optimization_result' => 'setOptimizationResult',
        'feed_submission' => 'setFeedSubmission',
        'offers_updated' => 'setOffersUpdated',
        'sales_rankings' => 'setSalesRankings'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'inserted' => 'getInserted',
        'updated' => 'getUpdated',
        'sku' => 'getSku',
        'asin' => 'getAsin',
        'title' => 'getTitle',
        'amazon_price' => 'getAmazonPrice',
        'initial_price' => 'getInitialPrice',
        'quantity' => 'getQuantity',
        'listed' => 'getListed',
        'condition' => 'getCondition',
        'fba' => 'getFba',
        'amazon_open_date' => 'getAmazonOpenDate',
        'strategy' => 'getStrategy',
        'offers' => 'getOffers',
        'optimization_result' => 'getOptimizationResult',
        'feed_submission' => 'getFeedSubmission',
        'offers_updated' => 'getOffersUpdated',
        'sales_rankings' => 'getSalesRankings'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CONDITION_UNKNOWN = 'UNKNOWN';
    const CONDITION_USED_LIKE_NEW = 'USED_LIKE_NEW';
    const CONDITION_USED_VERY_GOOD = 'USED_VERY_GOOD';
    const CONDITION_USED_GOOD = 'USED_GOOD';
    const CONDITION_USED_ACCEPTABLE = 'USED_ACCEPTABLE';
    const CONDITION_COLLECTIBLE_LIKE_NEW = 'COLLECTIBLE_LIKE_NEW';
    const CONDITION_COLLECTIBLE_VERY_GOOD = 'COLLECTIBLE_VERY_GOOD';
    const CONDITION_COLLECTIBLE_GOOD = 'COLLECTIBLE_GOOD';
    const CONDITION_COLLECTIBLE_ACCEPTABLE = 'COLLECTIBLE_ACCEPTABLE';
    const CONDITION_USED_REFURBISHED = 'USED_REFURBISHED';
    const CONDITION_REFURBISHED = 'REFURBISHED';
    const CONDITION_NEW = 'NEW';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getConditionAllowableValues()
    {
        return [
            self::CONDITION_UNKNOWN,
            self::CONDITION_USED_LIKE_NEW,
            self::CONDITION_USED_VERY_GOOD,
            self::CONDITION_USED_GOOD,
            self::CONDITION_USED_ACCEPTABLE,
            self::CONDITION_COLLECTIBLE_LIKE_NEW,
            self::CONDITION_COLLECTIBLE_VERY_GOOD,
            self::CONDITION_COLLECTIBLE_GOOD,
            self::CONDITION_COLLECTIBLE_ACCEPTABLE,
            self::CONDITION_USED_REFURBISHED,
            self::CONDITION_REFURBISHED,
            self::CONDITION_NEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['inserted'] = isset($data['inserted']) ? $data['inserted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['asin'] = isset($data['asin']) ? $data['asin'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['amazon_price'] = isset($data['amazon_price']) ? $data['amazon_price'] : null;
        $this->container['initial_price'] = isset($data['initial_price']) ? $data['initial_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['listed'] = isset($data['listed']) ? $data['listed'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['fba'] = isset($data['fba']) ? $data['fba'] : null;
        $this->container['amazon_open_date'] = isset($data['amazon_open_date']) ? $data['amazon_open_date'] : null;
        $this->container['strategy'] = isset($data['strategy']) ? $data['strategy'] : null;
        $this->container['offers'] = isset($data['offers']) ? $data['offers'] : null;
        $this->container['optimization_result'] = isset($data['optimization_result']) ? $data['optimization_result'] : null;
        $this->container['feed_submission'] = isset($data['feed_submission']) ? $data['feed_submission'] : null;
        $this->container['offers_updated'] = isset($data['offers_updated']) ? $data['offers_updated'] : null;
        $this->container['sales_rankings'] = isset($data['sales_rankings']) ? $data['sales_rankings'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["UNKNOWN", "USED_LIKE_NEW", "USED_VERY_GOOD", "USED_GOOD", "USED_ACCEPTABLE", "COLLECTIBLE_LIKE_NEW", "COLLECTIBLE_VERY_GOOD", "COLLECTIBLE_GOOD", "COLLECTIBLE_ACCEPTABLE", "USED_REFURBISHED", "REFURBISHED", "NEW"];
        if (!in_array($this->container['condition'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'condition', must be one of 'UNKNOWN', 'USED_LIKE_NEW', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'COLLECTIBLE_LIKE_NEW', 'COLLECTIBLE_VERY_GOOD', 'COLLECTIBLE_GOOD', 'COLLECTIBLE_ACCEPTABLE', 'USED_REFURBISHED', 'REFURBISHED', 'NEW'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["UNKNOWN", "USED_LIKE_NEW", "USED_VERY_GOOD", "USED_GOOD", "USED_ACCEPTABLE", "COLLECTIBLE_LIKE_NEW", "COLLECTIBLE_VERY_GOOD", "COLLECTIBLE_GOOD", "COLLECTIBLE_ACCEPTABLE", "USED_REFURBISHED", "REFURBISHED", "NEW"];
        if (!in_array($this->container['condition'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inserted
     * @return \DateTime
     */
    public function getInserted()
    {
        return $this->container['inserted'];
    }

    /**
     * Sets inserted
     * @param \DateTime $inserted
     * @return $this
     */
    public function setInserted($inserted)
    {
        $this->container['inserted'] = $inserted;

        return $this;
    }

    /**
     * Gets updated
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param \DateTime $updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets asin
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     * @param string $asin
     * @return $this
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets amazon_price
     * @return int
     */
    public function getAmazonPrice()
    {
        return $this->container['amazon_price'];
    }

    /**
     * Sets amazon_price
     * @param int $amazon_price
     * @return $this
     */
    public function setAmazonPrice($amazon_price)
    {
        $this->container['amazon_price'] = $amazon_price;

        return $this;
    }

    /**
     * Gets initial_price
     * @return int
     */
    public function getInitialPrice()
    {
        return $this->container['initial_price'];
    }

    /**
     * Sets initial_price
     * @param int $initial_price
     * @return $this
     */
    public function setInitialPrice($initial_price)
    {
        $this->container['initial_price'] = $initial_price;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets listed
     * @return bool
     */
    public function getListed()
    {
        return $this->container['listed'];
    }

    /**
     * Sets listed
     * @param bool $listed
     * @return $this
     */
    public function setListed($listed)
    {
        $this->container['listed'] = $listed;

        return $this;
    }

    /**
     * Gets condition
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     * @param string $condition
     * @return $this
     */
    public function setCondition($condition)
    {
        $allowed_values = array('UNKNOWN', 'USED_LIKE_NEW', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'COLLECTIBLE_LIKE_NEW', 'COLLECTIBLE_VERY_GOOD', 'COLLECTIBLE_GOOD', 'COLLECTIBLE_ACCEPTABLE', 'USED_REFURBISHED', 'REFURBISHED', 'NEW');
        if (!is_null($condition) && (!in_array($condition, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'condition', must be one of 'UNKNOWN', 'USED_LIKE_NEW', 'USED_VERY_GOOD', 'USED_GOOD', 'USED_ACCEPTABLE', 'COLLECTIBLE_LIKE_NEW', 'COLLECTIBLE_VERY_GOOD', 'COLLECTIBLE_GOOD', 'COLLECTIBLE_ACCEPTABLE', 'USED_REFURBISHED', 'REFURBISHED', 'NEW'");
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets fba
     * @return bool
     */
    public function getFba()
    {
        return $this->container['fba'];
    }

    /**
     * Sets fba
     * @param bool $fba
     * @return $this
     */
    public function setFba($fba)
    {
        $this->container['fba'] = $fba;

        return $this;
    }

    /**
     * Gets amazon_open_date
     * @return int
     */
    public function getAmazonOpenDate()
    {
        return $this->container['amazon_open_date'];
    }

    /**
     * Sets amazon_open_date
     * @param int $amazon_open_date
     * @return $this
     */
    public function setAmazonOpenDate($amazon_open_date)
    {
        $this->container['amazon_open_date'] = $amazon_open_date;

        return $this;
    }

    /**
     * Gets strategy
     * @return \eSagu\Amzn\RePricing\V1\Model\RepricingItemStrategyDTO
     */
    public function getStrategy()
    {
        return $this->container['strategy'];
    }

    /**
     * Sets strategy
     * @param \eSagu\Amzn\RePricing\V1\Model\RepricingItemStrategyDTO $strategy
     * @return $this
     */
    public function setStrategy($strategy)
    {
        $this->container['strategy'] = $strategy;

        return $this;
    }

    /**
     * Gets offers
     * @return \eSagu\Amzn\RePricing\V1\Model\ItemOfferDTO[]
     */
    public function getOffers()
    {
        return $this->container['offers'];
    }

    /**
     * Sets offers
     * @param \eSagu\Amzn\RePricing\V1\Model\ItemOfferDTO[] $offers
     * @return $this
     */
    public function setOffers($offers)
    {
        $this->container['offers'] = $offers;

        return $this;
    }

    /**
     * Gets optimization_result
     * @return \eSagu\Amzn\RePricing\V1\Model\RepricingItemOptimizationResultDTO
     */
    public function getOptimizationResult()
    {
        return $this->container['optimization_result'];
    }

    /**
     * Sets optimization_result
     * @param \eSagu\Amzn\RePricing\V1\Model\RepricingItemOptimizationResultDTO $optimization_result
     * @return $this
     */
    public function setOptimizationResult($optimization_result)
    {
        $this->container['optimization_result'] = $optimization_result;

        return $this;
    }

    /**
     * Gets feed_submission
     * @return \eSagu\Amzn\RePricing\V1\Model\RepricingFeedSubmissionDTO
     */
    public function getFeedSubmission()
    {
        return $this->container['feed_submission'];
    }

    /**
     * Sets feed_submission
     * @param \eSagu\Amzn\RePricing\V1\Model\RepricingFeedSubmissionDTO $feed_submission
     * @return $this
     */
    public function setFeedSubmission($feed_submission)
    {
        $this->container['feed_submission'] = $feed_submission;

        return $this;
    }

    /**
     * Gets offers_updated
     * @return int
     */
    public function getOffersUpdated()
    {
        return $this->container['offers_updated'];
    }

    /**
     * Sets offers_updated
     * @param int $offers_updated
     * @return $this
     */
    public function setOffersUpdated($offers_updated)
    {
        $this->container['offers_updated'] = $offers_updated;

        return $this;
    }

    /**
     * Gets sales_rankings
     * @return \eSagu\Amzn\RePricing\V1\Model\RepricingItemSalesRankingsDTO
     */
    public function getSalesRankings()
    {
        return $this->container['sales_rankings'];
    }

    /**
     * Sets sales_rankings
     * @param \eSagu\Amzn\RePricing\V1\Model\RepricingItemSalesRankingsDTO $sales_rankings
     * @return $this
     */
    public function setSalesRankings($sales_rankings)
    {
        $this->container['sales_rankings'] = $sales_rankings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\eSagu\Amzn\RePricing\V1\ObjectSerializer::sanitizeForSerialization($this));
    }
}


